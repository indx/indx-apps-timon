#!/usr/bin/env python
##
## Super Fancy Autoreloader module for speeding up Webbox development
##  inspired by autoreload.py, which did not work because python does
##  not free up ports taken up by terminated subprocess children:: so
##  we use daemonization to make it work
## 
## @see: http://stackoverflow.com/questions/3355995/fork-and-exit-in-python
## @see: http://stackoverflow.com/questions/881388/what-is-the-reason-for-performing-a-double-fork-when-creating-a-daemon
##  (c) 2012 - electronic Max - Part of the WebBox framework
## 
## Usage: just run this main ./autorerun
##
## Known side effect: the server will detach from the terminal, so you will need ot
## explicitly kill the server by sending it a signal (kill etc)

import os, sys, time, subprocess

def file_filter(name):
    
    return (not name.startswith(".") or name.endswith('.js') or name.endswith('.less') or name.endswith('.html') or name.endswith('css'))  # and (not name.endswith(".swp"))

def file_times(path):
    for top_level in filter(file_filter, os.listdir(path)):
        for root, dirs, files in os.walk(top_level):
            for f in filter(file_filter, files):
                yield os.stat(os.path.join(root, f)).st_mtime
                pass
            pass
        pass
    pass

def spawn():
    pid = os.fork()
    if pid == 0:
        os.setsid()
        os.umask(0) 
        pid2 = os.fork() 
        if (pid2 == 0):  # Second child
            # YOUR CODE HERE
            import run # run run runnnnnnn!
            sys.exit()
        else:
            return pid2 # sys.exit()    #First child exists
        ## we're the child
    else:
        sys.exit()

# The path to watch
path = '.'
# How often we check the filesystem for changes (in seconds)
wait = 1

# start a process up : 
pid = spawn()
# The current maximum file modified time under the watched directory
last_mtime = max(file_times(path))

while True:
    max_mtime = max(file_times(path))
    if max_mtime > last_mtime:
        if pid:
            print 'Killing process ' + repr(pid)
            os.kill(pid, 9)
            time.sleep(1) # wait for thread exit
        pid = spawn()
        last_mtime = max(file_times(path))
    else:
        pass # print "sleeping zzz"
    time.sleep(wait)
