start
	= as:arguments?  _$_ r:result? _$_ d:description_lines?
			{ return { args: as, description: d, result: r }; }

arguments
	= a:argument __ as:arguments
			{ return [].concat(as, [a]); }
	/ a:argument
			{ return a; }

argument
	= $ "@arg" _ t:type_statement? _ n:name _ ":"? _ c:comment?
			{ return { types: t, name: n, comment: c }; }

description_lines
	= d:.* { return d.join(''); }
//	= description_line description_lines
//	/ description_line

description_line
	= c:comment __
			{ return c; }

result
	= return_result
    / async_result
    / chain_result

return_result
	= $ "@return" _ type_statement? _ comment

async_result
	= then: async_then_result _$_ fail: async_fail_result
			{ return { then: then, fail: fail }; }

async_then_result
	= "@then" _ cb:callback _ c:comment
			{ return { comment: c, args: cb }; }

async_fail_result
	= "@fail" //_ async_fail_result_cases
			{ return { cases: [] }; }

async_fail_result_cases
	= async_fail_result_case async_fail_result_cases
	/ async_fail_result_case

async_fail_result_case
	= $ comment _ callback

callback
	= _ "(" _ callback_arguments _ ")" _

callback_arguments
	= _ callback_argument _ "," _ callback_arguments _
	/ _ callback_argument _

callback_argument
	= [^\n\r,]*
	//= _ type_statement _ callback_argument_comment  _

callback_argument_comment
	= c:[^\n\r,]*
			{ return c.join(''); }


chain_result
	= $ "@chain"



type_statement
	= _ "<" _ ts:types _ ">" _
			{ return ts; }

types
	= _ t:type _ "|" _ ts:types _
			{ return [].concat(ts, [t]); }
	/ _ t:type _
			{ return t; }

type
	= t: [^|>]+
			{ return t.join(''); }


name
	= n:[^\s\-\n\r:]+
			{ return n.join(''); }

comment
	= c:[^\n\r]*
			{ return c.join(''); }


$
	= _ "///" _


_$_ = __ $ __ _$_
	/ __ $ __
	/ __

_
	= [ \t]*
			{ return ''; }

__
	= [ \t\r\n]*
			{ return ''; }
